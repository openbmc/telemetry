{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c4e86d79_2ddd5223",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2024-09-29T09:54:32Z",
      "side": 1,
      "message": "Changes look good to me.",
      "revId": "00d48ed2c68248bd7d1f64135439c3d6a995dc6a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11983a26_ae44ba28",
        "filename": "src/errors.cpp",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-09-30T09:28:23Z",
      "side": 1,
      "message": "I see you want to align with other upstream services with error reporting.\nOther YAML definitions mention their errors.\n\nI believe correct course of action would be to have them approved in service spec first.",
      "range": {
        "startLine": 12,
        "startChar": 47,
        "endLine": 16,
        "endChar": 0
      },
      "revId": "00d48ed2c68248bd7d1f64135439c3d6a995dc6a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24e038b4_ec9f1966",
        "filename": "src/errors.cpp",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1001329
      },
      "writtenOn": "2024-09-30T11:41:16Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "11983a26_ae44ba28",
      "range": {
        "startLine": 12,
        "startChar": 47,
        "endLine": 16,
        "endChar": 0
      },
      "revId": "00d48ed2c68248bd7d1f64135439c3d6a995dc6a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc969b36_ef9d6d7b",
        "filename": "src/errors.cpp",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1001329
      },
      "writtenOn": "2024-10-01T13:05:45Z",
      "side": 1,
      "message": "I\u0027ve prepared a spec change in https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/74968. Could You please take a look?",
      "parentUuid": "24e038b4_ec9f1966",
      "range": {
        "startLine": 12,
        "startChar": 47,
        "endLine": 16,
        "endChar": 0
      },
      "revId": "00d48ed2c68248bd7d1f64135439c3d6a995dc6a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b3f5858_d60a2a86",
        "filename": "src/errors.cpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-09-30T09:28:23Z",
      "side": 1,
      "message": "Why having our own implementaton when sdbusplus::Error::...common..InvalidArgument exists? What\u0027s so special about this compared to others?",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 1
      },
      "revId": "00d48ed2c68248bd7d1f64135439c3d6a995dc6a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce107ca1_493b2873",
        "filename": "src/errors.cpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1001329
      },
      "writtenOn": "2024-09-30T11:41:16Z",
      "side": 1,
      "message": "Autogenerated implementation contains hardcoded message strings for description() and what() overrides. If we want to pass info about failing property in description, then we need to have custom version of that error.",
      "parentUuid": "0b3f5858_d60a2a86",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 1
      },
      "revId": "00d48ed2c68248bd7d1f64135439c3d6a995dc6a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0ad092b_a89acdda",
        "filename": "src/errors.cpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-10-01T08:07:59Z",
      "side": 1,
      "message": "I see. But then you don\u0027t have the journal log, like other `elog` entries, right?\n\nI don\u0027t think mimicking \u0027standard\u0027 type (by name) but having non-standard implementation and behavior is the way to go... It\u0027s 2 steps forward and 1 step backward.\n\nDo I see correctly that what you\u0027re trying to achieve is to have `description()` and `what()` passed through D-Bus?\n\nIn that way I suppose we need to at least make implementation behave similarly by:\n- `report()-ing` the intended exception type\n- throwing our custom implementation\n\nThis is short-sighted though, wonder if there are plans for these to support passing metadata as well..",
      "parentUuid": "ce107ca1_493b2873",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 1
      },
      "revId": "00d48ed2c68248bd7d1f64135439c3d6a995dc6a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80b5bb49_c9752dd3",
        "filename": "src/errors.cpp",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1001329
      },
      "writtenOn": "2024-10-01T13:05:45Z",
      "side": 1,
      "message": "What I\u0027m trying to achieve here is:\n1) to be able to use bmcweb\u0027s utility function for setting Dbus properties,\n2) retain already existing error reporting mechanism when any method call fails.\n\nFor 1) to achieve, error name needs to be \"xyz.openbmc_project.Common.Error.InvalidArgument\", whereas 2) requires that error description will be property name.\n\n\n\u003e Do I see correctly that what you\u0027re trying to achieve is to have `description()` and `what()` passed through D-Bus?\n\n`description()` is mapped to `message` field from `sd_bus_error` structure. That is currently used for getting info, which property is incorrect (ref.: https://github.com/openbmc/bmcweb/blob/master/redfish-core/lib/metric_report_definition.hpp#L730-L743).\n\n\u003e In that way I suppose we need to at least make implementation behave similarly by:\n\u003e - `report()-ing` the intended exception type\n\u003e - throwing our custom implementation\n\u003e \n\u003e This is short-sighted though, wonder if there are plans for these to support passing metadata as well..\n\nTBF the more I think of it the more I don\u0027t know if this whole type impersonation can be allowed at all.\n\n@Patrick, could You please share Your opinion on it? Is it OK to provide custom description to error defined in standard? Or perhaps we should think of another solution for that?",
      "parentUuid": "a0ad092b_a89acdda",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 1
      },
      "revId": "00d48ed2c68248bd7d1f64135439c3d6a995dc6a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9aea136_1f0e1ab6",
        "filename": "src/errors.cpp",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-09-30T09:28:23Z",
      "side": 1,
      "message": "As soon as this throws, passed `std::string\u0026` (and your reference to c_str ) will be invalid.\n\nI\u0027m not familiar with these autogenerated errors. You sure it\u0027s safe?",
      "revId": "00d48ed2c68248bd7d1f64135439c3d6a995dc6a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "238130c4_c2b82ae0",
        "filename": "src/errors.cpp",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1001329
      },
      "writtenOn": "2024-09-30T11:41:16Z",
      "side": 1,
      "message": "Contents of passed c-string are only used for journal logging right before throwing the actual exception: https://github.com/openbmc/phosphor-logging/blob/master/lib/include/phosphor-logging/elog.hpp#L172-L176. The autogenerated error is initialized without any arguments, so I think it\u0027s safe to provide the string this way.",
      "parentUuid": "f9aea136_1f0e1ab6",
      "revId": "00d48ed2c68248bd7d1f64135439c3d6a995dc6a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d85fe1df_a46bbfbc",
        "filename": "src/errors.cpp",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-10-01T08:07:59Z",
      "side": 1,
      "message": "For now, yeah, we\u0027re basing this on the hope it won\u0027t change in the future ;)",
      "parentUuid": "238130c4_c2b82ae0",
      "revId": "00d48ed2c68248bd7d1f64135439c3d6a995dc6a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ced4823_769f77e1",
        "filename": "subprojects/phosphor-dbus-interfaces.wrap",
        "patchSetId": 2
      },
      "lineNbr": 3,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-09-30T09:28:23Z",
      "side": 1,
      "message": "This makes your build potentially unreproducible.",
      "revId": "00d48ed2c68248bd7d1f64135439c3d6a995dc6a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98aebbb2_e910fd2a",
        "filename": "subprojects/phosphor-dbus-interfaces.wrap",
        "patchSetId": 2
      },
      "lineNbr": 3,
      "author": {
        "id": 1001329
      },
      "writtenOn": "2024-09-30T11:41:16Z",
      "side": 1,
      "message": "I\u0027m following the format from other wraps, used not only in telemetry, but other upstream projects as well. IIRC, it is preferred here this way, because fixed revisions quickly tend to get out of date. Both CI, and Yocto builds ignore it anyway, as they define subproject versions independently.",
      "parentUuid": "2ced4823_769f77e1",
      "revId": "00d48ed2c68248bd7d1f64135439c3d6a995dc6a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22e0cd42_ebb88e7c",
        "filename": "subprojects/phosphor-dbus-interfaces.wrap",
        "patchSetId": 2
      },
      "lineNbr": 3,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-10-01T08:07:59Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "98aebbb2_e910fd2a",
      "revId": "00d48ed2c68248bd7d1f64135439c3d6a995dc6a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}