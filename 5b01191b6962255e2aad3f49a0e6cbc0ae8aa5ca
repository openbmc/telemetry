{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2fac7383_7f5c0f93",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-10-23T08:02:17Z",
      "side": 1,
      "message": "In this implementation we\u0027ll have a side effect of property, which after writing will \u0027erase\u0027 contents of the other.\n\nThis is intrinsic property of variant concept.\n\nIf it helps bmcweb then it\u0027s OK. I suppose we should also prepare updated interface definition in https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Telemetry/Trigger.interface.yaml ?",
      "revId": "5b01191b6962255e2aad3f49a0e6cbc0ae8aa5ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a23608e7_0a3a849d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-27T18:40:45Z",
      "side": 1,
      "message": "\u003e In this implementation we\u0027ll have a side effect of property, which after writing will \u0027erase\u0027 contents of the other.\n\nI think in user facing behavior, we have that already?  That seems like a small thing.\n\n\u003e updated interface definition in\n\nYep.  can do.",
      "parentUuid": "2fac7383_7f5c0f93",
      "revId": "5b01191b6962255e2aad3f49a0e6cbc0ae8aa5ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6813127_e15866f8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-27T19:48:23Z",
      "side": 1,
      "message": "Pushed to\nhttps://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/76123",
      "parentUuid": "a23608e7_0a3a849d",
      "revId": "5b01191b6962255e2aad3f49a0e6cbc0ae8aa5ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9dabfe1_21353b2e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-12-04T12:25:53Z",
      "side": 1,
      "message": "\u003e\u003e In this implementation we\u0027ll have a side effect of property, which after writing \u003e\u003e will \u0027erase\u0027 contents of the other.\n\u003e\n\u003e I think in user facing behavior, we have that already? That seems like a small \u003e thing.\n\nYou are correct. Currently that is the behavior and it\u0027s mandated by type being a `variant`. \n\nAfter splitting to separate properties code still treats them as mutually exclusive. Writing to one clears the other.\n\nI believe this behavior should be documented in the updated interface descriptor. Don\u0027t you think?",
      "parentUuid": "d6813127_e15866f8",
      "revId": "5b01191b6962255e2aad3f49a0e6cbc0ae8aa5ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40dc2f1e_4c0f623a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-12-04T16:28:26Z",
      "side": 1,
      "message": "\u003e \u003e\u003e In this implementation we\u0027ll have a side effect of property, which after writing \u003e\u003e will \u0027erase\u0027 contents of the other.\n\u003e \u003e\n\u003e \u003e I think in user facing behavior, we have that already? That seems like a small \u003e thing.\n\u003e \n\u003e You are correct. Currently that is the behavior and it\u0027s mandated by type being a `variant`. \n\u003e \n\u003e After splitting to separate properties code still treats them as mutually exclusive. Writing to one clears the other.\n\u003e \n\u003e I believe this behavior should be documented in the updated interface descriptor. Don\u0027t you think?\n\nI didn’t include it because it’s not an issue with the interface, it’s an issue with the implementation.  we can document it somewhere in this repo if you’d like.  ultimately I’d just like to see the constraint removed and have them be independent parameters, but one step at a time.\n\nwhere would you like to see this documented?",
      "parentUuid": "b9dabfe1_21353b2e",
      "revId": "5b01191b6962255e2aad3f49a0e6cbc0ae8aa5ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "968542e4_cb7c5d3e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000534
      },
      "writtenOn": "2024-12-05T09:59:59Z",
      "side": 1,
      "message": "It depends. AFAIK variant was reflecting design of the Redfish interface itself, as you have MetricType enumeration:\nhttps://github.com/openbmc/bmcweb/blob/8274eb11c44f38e51e9c643ae62192bafacf257c/redfish-core/lib/trigger.hpp#L196\n\nIf we assume that openbmc/telemetry serves Redfish only then perhaps requirement coming from the Schema definition itself should be enough and no extra documentation is needed.",
      "parentUuid": "40dc2f1e_4c0f623a",
      "revId": "5b01191b6962255e2aad3f49a0e6cbc0ae8aa5ca",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}